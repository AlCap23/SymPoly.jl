function landau_mignotte(p::AbstractPolynomial)
    l = ceil(Int, hypot(coefficients(p)...))
    d = deg(p) √∑ 2
    maximum([binomial(d-1,j)*l + binomial(d-1,j-1)*leading(p) for j = 1:d])
end

function factor_distinct_degree(p::Polynomial{true, ‚Ñ§‚Çö{n}}) where n
    f = FactoredPoly()
    p‚ÇÄ = p
    x = modular(n, var(p))
    d = 1
    while deg(p) > 1 # && d <= deg(p) √∑ 2
        # q = modular(n, x^(n^d) - x)
        q = modpow(x, n^d, p‚ÇÄ) - x
        g = gcd(p, q)

        if !isone(g)
            add_factor!(f, g, d)
            p √∑= g
        end
        d += 1
    end
    # add_factor!(f, p, deg(p))
    f
end

@polyvar ùë¢

function factor_equal_degree(p::Polynomial{true, ‚Ñ§‚Çö{n}}, d, i‚ÇÄ=0) where n
    f = FactoredPoly()
    p‚ÇÄ = p
    # x = var(p)
    x = var(p)
    e = (n^d - 1) √∑ 2

    for i = i‚ÇÄ:n
        a = modular(n, x+i)
        # a = modular(n, ((i-1)√∑n)*x^2 + x + ((i-1)%n))
        q = modpow(a, e, p‚ÇÄ) - one(p‚ÇÄ)
        g = gcd(p, q)
        # q·µ§ = modular(n, ùë¢^e - 1)
        # p·µ§ = p(x => ùë¢ - i)
        # g·µ§ = gcd(p·µ§, q·µ§)
        # g = g·µ§(ùë¢ => x + i)
        g /= leading(g)

        if !isone(g)
            if deg(g) == d
                add_factor!(f, g, 1)
            else
                f‚ÇÇ = factor_equal_degree(g, d, i+1)
                combine!(f, f‚ÇÇ)
            end
            p √∑= g
        end

        isone(p) && return f
    end
    return f
end

function factor_equal_degree(f::FactoredPoly)
    h = FactoredPoly()

    for w in factors(f)
        p, d = first(w), last(w)
        if deg(p) == d
            add_factor!(h, p, 1)
        else
            combine!(h, factor_equal_degree(p, d))
        end
    end
    h
end

function is_square_free(p::AbstractPolynomial)
    p‚Ä≤ = derivative(p)
    g = gcd(p, p‚Ä≤)
    return isone(g)
end

function find_integer_factorization(p::AbstractPolynomial, f)
    m = length(f)
    S = Set{Int}()
    fs = []

    d = 1
    while length(S) < m && d <= deg(p)√∑2
        for a in Iterators.product([1:m for i=1:d]...)
            if length(unique(a)) == d
                if !any(i ‚àà S for i in a)
                    œÅ = prod(f[i] for i in a)
                    if iszero(p % œÅ)
                        push!(fs, œÅ)
                        p = remove_factor(p, œÅ)
                        for i in a
                            push!(S, i)
                        end
                    end
                end
            end
        end
        d += 1
    end

    push!(fs, p)
    fs
end

function factor_modular(p::AbstractPolynomial, n)
    P = modular(n, p)
    f = factor_distinct_degree(P)
    f = factor_equal_degree(f)
    [demodular(v) for v in first.(factors(f))]
end

# p should be integer and monic
function factor_roundabout(p::AbstractPolynomial, n)
    !isprime(n) && error("$n is not a prime!")
    lc = leading(p)
    p, undo = standard_form(p)
    Œª = landau_mignotte(p)
    x = var(p)

    f = FactoredPoly()
    p‚ÇÅ = one(p)

    for w in factors(decompose(p))
        v, k = first(w), last(w)

        if deg(v, x) > 0
            f‚ÇÅ = factor_modular(v, n)
            f‚ÇÇ = lift(v, f‚ÇÅ, n, 2Œª)
            f‚ÇÉ = find_integer_factorization(v, f‚ÇÇ)

            for u in f‚ÇÉ
                if deg(u) > 0
                    w‚ÇÅ = undo(u)
                    add_factor!(f, w‚ÇÅ, k)
                    p‚ÇÅ = p‚ÇÅ * w‚ÇÅ^k
                end
            end
        end
    end


    œÅ = lc // leading(p‚ÇÅ)
    if denominator(œÅ) == 1
        œÅ = numerator(œÅ)
    end

    if !isone(œÅ)
        add_factor!(f, œÅ, 1)
    end

    f
end

function factor_roundabout(eq, n)
    p, v = prewrap(eq)
    unwrap(factor_roundabout(p, n), v)
end

function factor_roundabout(p::AbstractPolynomial; n=3, max_prime=50)
    n >= max_prime && return nothing
    n = nextprime(n)

    f‚ÇÅ = factor_roundabout(p, n)

    i = 1
    while length(f‚ÇÅ) == 1 && i < 4
        n = nextprime(n+1)
        f‚ÇÅ = factor_roundabout(p, n)
        i += 1
    end

    length(f‚ÇÅ) == 1 && return f‚ÇÅ

    f‚ÇÇ = FactoredPoly()
    k = 1

    for w‚ÇÅ in factors(f‚ÇÅ)
        v‚ÇÅ, k‚ÇÅ = first(w‚ÇÅ), last(w‚ÇÅ)
        if deg(v‚ÇÅ) == 0
            k *= v‚ÇÅ^k‚ÇÅ
        elseif deg(v‚ÇÅ) == 1
            k *= cont(v‚ÇÅ)^k‚ÇÅ
            add_factor!(f‚ÇÇ, prim(v‚ÇÅ), k‚ÇÅ)
        else
            f‚ÇÉ = factor_roundabout(v‚ÇÅ; n=n+1, max_prime=max_prime)
            if f‚ÇÉ != nothing
                for w‚ÇÉ in factors(f‚ÇÉ)
                    v‚ÇÉ, k‚ÇÉ = first(w‚ÇÉ), last(w‚ÇÉ)
                    if deg(v‚ÇÉ) == 0
                        k *= v‚ÇÉ^(k‚ÇÅ*k‚ÇÉ)
                    else
                        add_factor!(f‚ÇÇ, v‚ÇÉ, k‚ÇÅ*k‚ÇÉ)
                    end
                end
            end
        end
    end

    if !isone(k)
        add_factor!(f‚ÇÇ, k, 1)
    end

    return f‚ÇÇ
end

factor_roundabout(eq) = wrap(factor_roundabout, eq)

##############################################################################

function remove_factor(p::AbstractPolynomialLike, f)
    q, r = divrem(rationalize(p), f)
    !iszero(r) && error("$f is not a proper factor of $p")
    last(integer_poly(q))
end

function lift(p::AbstractPolynomial, s‚ÇÅ, t‚ÇÅ, n, Œª)
    s‚Çô = modular(n, s‚ÇÅ)
    t‚Çô = modular(n, t‚ÇÅ)
    _, œÉ‚Çô, œÑ‚Çô = gcdx(s‚Çô, t‚Çô)

    s, t = s‚ÇÅ, t‚ÇÅ
    d = p - s*t
    c‚Çô = modular(n, d √∑ n)

    i = 2
    while n^i < 2Œª && !iszero(d)
        sÃÑ‚Çô = rem(œÑ‚Çô*c‚Çô, modular(n, s))
        tÃÑ‚Çô = rem(œÉ‚Çô*c‚Çô, modular(n, t))
        s += n^(i-1) * demodular(sÃÑ‚Çô)
        t += n^(i-1) * demodular(tÃÑ‚Çô)
        d = p - s*t
        c‚Çò = modular(n, d √∑ n^i)
        i += 1
    end

    f = FactoredPoly()
    add_factor!(f, s)
    add_factor!(f, t)
    f
end

function lift(p::AbstractPolynomial, f, m, Œª)
    nf = length(f)
    if nf <= 1
        return f
    elseif nf == 2
        s, t = f[1], f[2]
        return lift(p, s, t, m, Œª)
    else
        s, t = f[1], last(integer_poly(prod(f[i] for i=2:nf)))
        h‚ÇÅ = lift(p, s, t, m, Œª)
        s = h‚ÇÅ[1]
        # h‚ÇÇ = lift(remove_factor(p,s), f[2:nf], m, Œª)
        h‚ÇÇ = lift(t, f[2:nf], m, Œª)
        add_factor!(h‚ÇÇ, s)
        return h‚ÇÇ
    end
end

function modpow(p::AbstractPolynomialLike, k::Integer, q::AbstractPolynomialLike)
    x = rem(p, q)
    r = one(p)
    while k > 0
        if isodd(k)
            r = rem(r*x, q)
        end
        x = rem(x*x, q)
        k >>= 1
    end
    r
end
